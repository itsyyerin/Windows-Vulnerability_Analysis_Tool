using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;


namespace Windows_Vulnerability_Analysis_Tool
{
    public class PC_02

    {

        public int PasswordComplexityPolicy()
        {
            var tempFile = Path.GetTempFileName();
            //임시파일의 전체경로 설정.

            Process p = new Process();
            //로컬 프로세스에 대한 액세스를 제공하고 로컬시스템 프로세스를 시작 및 중지하려고 객체만듬.

            p.StartInfo.FileName = Environment.ExpandEnvironmentVariables(@"%SystemRoot%\system32\secedit.exe");
            //startinfo : 프로세스 시작 시 사용할 매개변수 집합. start가 호출되어야 실행.
            p.StartInfo.Arguments = String.Format(@"/export /cfg ""{0}"" /quiet", tempFile);
            //시작되는 프로세스가 보안정책을 tempfile파일에 내보내서 시작되게 함.
            //작업은 조용히.
            p.StartInfo.CreateNoWindow = true;
            //새 창 안 만들고 걍 프로세스 시작.
            p.StartInfo.UseShellExecute = false;
            //셸 사용 안하고? 실행파일에서 직접 프로세스 만들기.
            p.Start(); //프로세스 시작
            p.WaitForExit(); //프로세스 종료될 때까지 무기한 대기.

            var file = IniFile.Load(tempFile);
            //tempFile에 저장된 ini파일을 읽어옴.

            IniSection systemAccess = null;
            var passwordComplexityString = "";
            var passwordComplexity = 0;

            if (file.Sections.TryGetValue("System Access", out systemAccess)
                && systemAccess.TryGetValue("PasswordComplexity", out passwordComplexityString)
                && Int32.TryParse(passwordComplexityString, out passwordComplexity)
                && passwordComplexity == 1)
            {
                return 1;
            }
            else
            {
                return 0;
            }


            //시스템엑세스 섹션에서 passwordcomplexity 키의 값을 가져오고, 가져왓고 암호복잡성 만족하면 1 = true.



        }

        class IniFile //ini파일 클래스, ini파일 : 프로그램이 작동하는 방법 지정하는 설정 파일.
        {
            public static IniFile Load(string filename) //파일에서 ini데이터 로드해서 iniFile객체생성.
            {
                var result = new IniFile();
                result.Sections = new Dictionary<string, IniSection>();
                var section = new IniSection(String.Empty);
                result.Sections.Add(section.Name, section);

                foreach (var line in File.ReadAllLines(filename))
                //한줄한줄 처리
                {
                    var trimedLine = line.Trim();
                    switch (line[0])
                    {
                        case ';':
                            continue;
                        // 주석이면 쓰루. ini파일의 주석은 세미콜론
                        case '[':
                            section = new IniSection(trimedLine.Substring(1, trimedLine.Length - 2));
                            result.Sections.Add(section.Name, section);
                            break;
                        // '['로 시작되면(섹션 시작이면) 새로운 섹션을 만듬.
                        default:
                            // ; 또는 [로 시작되지 않는 경우
                            var parts = trimedLine.Split('='); // =기준으로 문자열 자르기
                            if (parts.Length > 1)
                            {
                                section.Add(parts[0].Trim(), parts[1].Trim());
                                // 문자열에 =가 있었으면(키-값 쌍이면) 섹션에 추가.
                            }
                            break;
                    }
                }

                return result;
            }

            public IDictionary<string, IniSection> Sections { get; private set; }
        }

        class IniSection : Dictionary<string, string> //딕셔너리클래스 상속하는 inisection클래스.
        {
            public IniSection(string name) : base(StringComparer.OrdinalIgnoreCase)
            //대소문자 비교XXX.

            {
                this.Name = name;
                //dictionary에서 해당 이름 for문으로 찾음. 외부에서 이름 읽기 가능.
            }

            public string Name { get; private set; } //변경은 내부에서만 가능. 
        }



        public void ChangePassword()
        {
            try
            {
                Process.Start("ms-settings:signinoptions");
                return;
            }
            catch (Exception ex)
            {
                return;
            }
            
        }
    }
}