using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using static System.Formats.Asn1.AsnWriter;
using static System.Net.Mime.MediaTypeNames;
using System.Reflection;
using System.Text.RegularExpressions;


namespace Windows_Vulnerability_Analysis_Tool
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    /// 
    public partial class MainWindow : Window
    {
        private readonly string riskStatusPrefix = "위험도: ";
        private string ReadLastRiskStatus(string filePath)
        {
            if (File.Exists(filePath))
            {
                // 모든 줄을 읽은 다음에 마지막 줄을 가져옵니다
                string[] lines = File.ReadAllLines(filePath);
                if (lines.Length > 0)
                {
                    // 마지막 줄이 riskStatusPrefix로 시작하면 해당 부분을 반환합니다.
                    if (lines.Last().StartsWith(riskStatusPrefix))
                    {
                        // 아직 점검 전입니다. 문구 숨기기
                        preAnalysisTextBlock.Visibility = Visibility.Collapsed;

                        return lines.Last().Substring(riskStatusPrefix.Length);
                    }
                }
            }
            return null; // 파일이 없거나 비어있거나 riskStatusPrefix로 시작하지 않으면 null을 반환합니다.
        }

        private double ExtractVulnerabilityScore(string logEntry)
        {
            string[] lines = File.ReadAllLines(logEntry);
            // "취약점 점수: " 다음에 나오는 숫자를 찾아 추출합니다.
            string lineWithVulnerabilityScore = Array.Find(lines, line => line.Contains("취약점 점수: "));
            if (lineWithVulnerabilityScore != null)
            {
                string scoreSubstring = lineWithVulnerabilityScore.Substring(lineWithVulnerabilityScore.IndexOf("취약점 점수: ") + "취약점 점수: ".Length);
                if (double.TryParse(scoreSubstring, out double vulnerabilityScore))
                {
                    return vulnerabilityScore;
                }
            }
            return -1; // 숫자 추출에 실패하면 -1을 반환합니다.
        }


        public static readonly DependencyProperty ScoreProperty =
            DependencyProperty.Register("Score", typeof(int), typeof(MainWindow));

        public static readonly DependencyProperty StatusProperty =
            DependencyProperty.Register("Status", typeof(string), typeof(MainWindow));

        public int Score
        {
            get { return (int)GetValue(ScoreProperty); }
            set { SetValue(ScoreProperty, value); }
        }

        public string Status
        {
            get { return (string)GetValue(StatusProperty); }
            set { SetValue(StatusProperty, value); }
        }
        public static readonly DependencyProperty RiskStatusProperty =
        DependencyProperty.Register("RiskStatus", typeof(string), typeof(MainWindow));

        public string RiskStatus
        {
            get { return (string)GetValue(RiskStatusProperty); }
            set { SetValue(RiskStatusProperty, value); }
        }
        private ProgressBar circularProgressBar;
        private TextBlock scoreTextBlock;
        private TextBlock statusTextBlock;

        public MainWindow()
        {
            InitializeComponent();

            // Circular ProgressBar, Score TextBlock, Status TextBlock 초기화
            circularProgressBar = circularProgressBarElement;
            scoreTextBlock = scoreTextBlockElement;
            statusTextBlock = statusTextBlockElement;

            // 현재 실행 중인 어셈블리의 버전 정보를 가져옵니다.
            Version version = Assembly.GetExecutingAssembly().GetName().Version;
            string versionString = version.ToString();

            // 버전 정보를 TextBlock에 설정합니다.
            txtVersion.Text = "버전 : " + versionString;

            // 마지막 분석 날짜를 읽어와서 표시합니다.
            string timeFilePath = @"C:\Users\user\Time.txt";
            if (File.Exists(timeFilePath))
            {
                string lastAnalysisDate = File.ReadAllText(timeFilePath);
                txtLastAnalysisDate.Text = "마지막 분석 날짜: " + lastAnalysisDate;
            }

            string status = ReadLastRiskStatus(@"C:\Users\user\Loge.txt");
            double score = ExtractVulnerabilityScore(@"C:\Users\user\Loge.txt");
            Color statusColor;

            // 결과 출력
            score = (100 - (int)score)/10*10;
            scoreTextBlock.Text = score.ToString() + "점";
            Score = (int)score;

            if (score >= 70)
            {
                status = "양호";
                statusColor = Colors.LightBlue;
            }
            else if (score >= 41)
            {
                status = "보통";
                statusColor = Colors.Green;
            }
            else
            {
                status = "취약";
                statusColor = Colors.Red;
            }

            statusTextBlock.Inlines.Clear(); // 기존 텍스트 제거

            // "현재 내 PC 상태는" 일반 텍스트 추가
            statusTextBlock.Inlines.Add(new Run("현재 내 PC 상태는 "));

            // 상태 단어 추가 및 색상 설정
            Span statusSpan = new Span(new Run(status));
            statusSpan.Foreground = new SolidColorBrush(statusColor);
            statusTextBlock.Inlines.Add(statusSpan);

            statusTextBlock.Inlines.Add(new Run(" 입니다."));

            // Circular ProgressBar 업데이트
            circularProgressBar.Value = score;
        }


        private void StartButton_Click(object sender, RoutedEventArgs e)
        {
            string timeFilePath = @"C:\Users\user\Time.txt";
            string currentDate = DateTime.Now.ToString("yyyy-MM-dd");

            try
            {
                // 파일 작성
                if (File.Exists(timeFilePath))
                {
                    File.WriteAllText(timeFilePath, currentDate);
                }
                else
                {
                    using (StreamWriter writer = File.CreateText(timeFilePath))
                    {
                        writer.WriteLine(currentDate);
                    }
                }
                
                // 분석이 끝나면 마지막 분석 날짜 변경
                txtLastAnalysisDate.Text = "마지막 분석 날짜: " + currentDate;

                // 아직 점검 전입니다. 문구 숨기기
                preAnalysisTextBlock.Visibility = Visibility.Collapsed;

                // 분석 작업 수행
                PerformAnalysis();
            }
            catch (Exception ex)
            {
                // 예외 처리
                Console.WriteLine("파일 작성 중 오류가 발생했습니다: " + ex.Message);
            }
        }
        private void PerformAnalysis()
        {
            List<string> analysisResults = new List<string>();
            // PC-01의 패스워드의 주기적 변경
            PC_01 PC01 = new PC_01();
            int isPasswordPeriod = PC01.BooleanpasswordPeriod();
            analysisResults.Add("패스워드의 주기적 변경 : " + (isPasswordPeriod == 1 ? "양호" : "취약"));

            // PC-02의 패스워드 정책이 해당 기관의 보안 정책에 적합하게 설정
            PC_02 PC02 = new PC_02();
            int isPasswordPolicy = PC02.PasswordComplexityPolicy();
            analysisResults.Add("패스워드 정책이 해당 기관의 보안 정책에 적합하게 설정 : " + (isPasswordPolicy == 1 ? "양호" : "취약"));

            // PC-03의 공유폴더 제거
            PC_03 PC03 = new PC_03();
            int isShareFolder = PC03.SharedFolder();
            analysisResults.Add("공유폴더 제거 : " + (isShareFolder == 1 ? "양호" : "취약"));

            // PC-04 항목의 불필요한 서비스 제거
            PC_04 PC04 = new PC_04();
            int isUnnecessaryServiceStopped = PC04.CheckServices();
            analysisResults.Add("항목의 불필요한 서비스 제거 : " + (isUnnecessaryServiceStopped == 1 ? "양호" : "취약"));

            // PC-06 최신 서비스팩 적용(윈도우 10 업데이트에 서비스팩이 포함되어있다고 하길래 그냥 윈도우 최신 버전이면 최신 서비스팩이 적용되어있다고 판단하는 코드로 짰습니다)
            PC_06 PC06 = new PC_06();
            int isHotFixApplied = PC06.CheckHotFix();
            analysisResults.Add("최신 서비스팩 적용 : " + (isHotFixApplied == 1 ? "양호" : "취약"));

            // PC-09 바이러스 백신 프로그램 설치 및 주기적 업데이트
            PC_09 PC09 = new PC_09();
            int isAntivirusInstallednAutoupdateApplied = PC09.ChcekInstallationAutoUpdate();
            analysisResults.Add("바이러스 백신 프로그램 설치 및 주기적 업데이트 : " + (isAntivirusInstallednAutoupdateApplied == 1 ? "양호" : "취약"));

            // PC-10 바이러스 백신 프로그램에서 제공하는 실시간 감시 기능 활성화
            PC_10 PC10 = new PC_10();
            int isAntivirusRealTimeApplied = PC10.CheckAntivirusrealtime();
            analysisResults.Add("바이러스 백신 프로그램에서 제공하는 실시간 감시 기능 활성화 : " + (isAntivirusRealTimeApplied == 1 ? "양호" : "취약"));

            // PC-11 방화벽 상태 점검
            PC_11 PC11 = new PC_11();
            int isFirewallEnabled = PC11.CheckFirewallStatus();
            analysisResults.Add("방화벽 상태 점검 : " + (isFirewallEnabled == 1 ? "양호" : "취약"));

            // PC-12 화면보호기 상태 점검
            PC_12 PC12 = new PC_12();
            int isScreenSaverSecure = PC12.CheckScreenSaverStatus();
            analysisResults.Add("화면보호기 상태 점검 : " + (isScreenSaverSecure == 1 ? "양호" : "취약"));

            // PC-14 ActiveX 상태 점검
            /*PC_14 PC14 = new PC_14();
            int isActiveXSecure = PC14.CheckActiveXStatus();
            analysisResults.Add("ActiveX 상태 점검 : " + (isActiveXSecure == 1 ? "양호" : "취약"));*/

            //Loge.txt 양호 취약 총 갯수 계산
            int numGood = analysisResults.Count(result => result.Contains("양호"));

            // 취약 항목 수 계산
            int numVulnerable = analysisResults.Count(result => result.Contains("취약"));

            // 취약점 점수 계산
            double vulnerabilityScore = (double)numVulnerable / analysisResults.Count * 100;


            // 평균 위험도 점수 계산
            double averageRiskValue = (isPasswordPeriod +
                                       isPasswordPolicy +
                                       isShareFolder +
                                       isUnnecessaryServiceStopped +
                                       isHotFixApplied +
                                       isAntivirusInstallednAutoupdateApplied +
                                       isAntivirusRealTimeApplied +
                                       isFirewallEnabled +
                                       isScreenSaverSecure /*+
                                       isActiveXSecure */) / 10.0;

            int score = (int)(averageRiskValue * 100);


            // 평균 위험도 점수에 따라 양호, 보통, 취약 표시
            // 평균 위험도 점수에 따라 양호, 보통, 취약 표시
            string status;
            Color statusColor;
            if (score >= 70)
            {
                status = "양호";
                statusColor = Colors.LightBlue;
            }
            else if (score >= 41)
            {
                status = "보통";
                statusColor = Colors.Green;
            }
            else
            {
                status = "취약";
                statusColor = Colors.Red;
            }

            string logFilePath = @"C:\Users\user\Loge.txt";
            using (StreamWriter writer = new StreamWriter(logFilePath))
            {
                int numStatus;
                // 각 항목의 양호/취약 여부를 기록
                foreach (string result in analysisResults)
                {
                    writer.WriteLine(result);
                }

                // 양호 항목 수, 취약 항목 수, 취약점 점수, 검사 항목 수를 기록
                writer.WriteLine("양호 항목 수: " + numGood);
                writer.WriteLine("취약 항목 수: " + numVulnerable);
                writer.WriteLine("취약점 점수: " + vulnerabilityScore.ToString("F2"));
                writer.WriteLine("검사 항목 수: " + analysisResults.Count);
                writer.WriteLine("위험도: " + status);
            }

            // 결과 출력
            scoreTextBlock.Text = score.ToString() + "점";
            Score = score;

            statusTextBlock.Inlines.Clear(); // 기존 텍스트 제거

            // "현재 내 PC 상태는" 일반 텍스트 추가
            statusTextBlock.Inlines.Add(new Run("현재 내 PC 상태는 "));

            // 상태 단어 추가 및 색상 설정
            Span statusSpan = new Span(new Run(status));
            statusSpan.Foreground = new SolidColorBrush(statusColor);
            statusTextBlock.Inlines.Add(statusSpan);

            statusTextBlock.Inlines.Add(new Run(" 입니다."));

            // Circular ProgressBar 업데이트
            circularProgressBar.Value = score;

        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void HelpButton_Click(object sender, RoutedEventArgs e)
        {
            bool? Result = new MessageBox("업데이트 예정입니다.", MessageType.Info, MessageButtons.Ok).ShowDialog();

        }

        private void HomeButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void AnalyzeButton_Click(object sender, RoutedEventArgs e)
        {
            // 분석 버튼 클릭 시 분석 창 열기
            Analyze analyzeWindow = new Analyze();
            analyzeWindow.Show();
            this.Close();
        }

        private void Reservation_Click(object sender, RoutedEventArgs e)
        {

            bool? Result = new MessageBox("업데이트 예정입니다.", MessageType.Info, MessageButtons.Ok).ShowDialog();


        }




    }
}